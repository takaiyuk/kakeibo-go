// Code generated by MockGen. DO NOT EDIT.
// Source: ifttt.go

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInterfaceIFTTT is a mock of InterfaceIFTTT interface.
type MockInterfaceIFTTT struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceIFTTTMockRecorder
}

// MockInterfaceIFTTTMockRecorder is the mock recorder for MockInterfaceIFTTT.
type MockInterfaceIFTTTMockRecorder struct {
	mock *MockInterfaceIFTTT
}

// NewMockInterfaceIFTTT creates a new mock instance.
func NewMockInterfaceIFTTT(ctrl *gomock.Controller) *MockInterfaceIFTTT {
	mock := &MockInterfaceIFTTT{ctrl: ctrl}
	mock.recorder = &MockInterfaceIFTTTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfaceIFTTT) EXPECT() *MockInterfaceIFTTTMockRecorder {
	return m.recorder
}

// Emit mocks base method.
func (m *MockInterfaceIFTTT) Emit(arg0 string, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Emit", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Emit indicates an expected call of Emit.
func (mr *MockInterfaceIFTTTMockRecorder) Emit(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockInterfaceIFTTT)(nil).Emit), varargs...)
}

// Post mocks base method.
func (m *MockInterfaceIFTTT) Post(arg0, arg1 string, arg2 io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Post indicates an expected call of Post.
func (mr *MockInterfaceIFTTTMockRecorder) Post(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockInterfaceIFTTT)(nil).Post), arg0, arg1, arg2)
}
