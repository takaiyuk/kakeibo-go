// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/takaiyuk/kakeibo-go/pkg (interfaces: InterfaceIFTTT,InterfaceService,InterfaceSlackClient)

// Package mock_pkg is a generated GoMock package.
package mock_pkg

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pkg "github.com/takaiyuk/kakeibo-go/pkg"
)

// MockInterfaceIFTTT is a mock of InterfaceIFTTT interface.
type MockInterfaceIFTTT struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceIFTTTMockRecorder
}

// MockInterfaceIFTTTMockRecorder is the mock recorder for MockInterfaceIFTTT.
type MockInterfaceIFTTTMockRecorder struct {
	mock *MockInterfaceIFTTT
}

// NewMockInterfaceIFTTT creates a new mock instance.
func NewMockInterfaceIFTTT(ctrl *gomock.Controller) *MockInterfaceIFTTT {
	mock := &MockInterfaceIFTTT{ctrl: ctrl}
	mock.recorder = &MockInterfaceIFTTTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfaceIFTTT) EXPECT() *MockInterfaceIFTTTMockRecorder {
	return m.recorder
}

// Emit mocks base method.
func (m *MockInterfaceIFTTT) Emit(arg0 string, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Emit", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Emit indicates an expected call of Emit.
func (mr *MockInterfaceIFTTTMockRecorder) Emit(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockInterfaceIFTTT)(nil).Emit), varargs...)
}

// Post mocks base method.
func (m *MockInterfaceIFTTT) Post(arg0, arg1 string, arg2 io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Post indicates an expected call of Post.
func (mr *MockInterfaceIFTTTMockRecorder) Post(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockInterfaceIFTTT)(nil).Post), arg0, arg1, arg2)
}

// MockInterfaceService is a mock of InterfaceService interface.
type MockInterfaceService struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceServiceMockRecorder
}

// MockInterfaceServiceMockRecorder is the mock recorder for MockInterfaceService.
type MockInterfaceServiceMockRecorder struct {
	mock *MockInterfaceService
}

// NewMockInterfaceService creates a new mock instance.
func NewMockInterfaceService(ctrl *gomock.Controller) *MockInterfaceService {
	mock := &MockInterfaceService{ctrl: ctrl}
	mock.recorder = &MockInterfaceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfaceService) EXPECT() *MockInterfaceServiceMockRecorder {
	return m.recorder
}

// GetSlackMessages mocks base method.
func (m *MockInterfaceService) GetSlackMessages(arg0 *pkg.Config, arg1 *pkg.FilterSlackMessagesOptions) ([]*pkg.SlackMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlackMessages", arg0, arg1)
	ret0, _ := ret[0].([]*pkg.SlackMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlackMessages indicates an expected call of GetSlackMessages.
func (mr *MockInterfaceServiceMockRecorder) GetSlackMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlackMessages", reflect.TypeOf((*MockInterfaceService)(nil).GetSlackMessages), arg0, arg1)
}

// PostIFTTTWebhook mocks base method.
func (m *MockInterfaceService) PostIFTTTWebhook(arg0 *pkg.Config, arg1 []*pkg.SlackMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostIFTTTWebhook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostIFTTTWebhook indicates an expected call of PostIFTTTWebhook.
func (mr *MockInterfaceServiceMockRecorder) PostIFTTTWebhook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostIFTTTWebhook", reflect.TypeOf((*MockInterfaceService)(nil).PostIFTTTWebhook), arg0, arg1)
}

// MockInterfaceSlackClient is a mock of InterfaceSlackClient interface.
type MockInterfaceSlackClient struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceSlackClientMockRecorder
}

// MockInterfaceSlackClientMockRecorder is the mock recorder for MockInterfaceSlackClient.
type MockInterfaceSlackClientMockRecorder struct {
	mock *MockInterfaceSlackClient
}

// NewMockInterfaceSlackClient creates a new mock instance.
func NewMockInterfaceSlackClient(ctrl *gomock.Controller) *MockInterfaceSlackClient {
	mock := &MockInterfaceSlackClient{ctrl: ctrl}
	mock.recorder = &MockInterfaceSlackClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfaceSlackClient) EXPECT() *MockInterfaceSlackClientMockRecorder {
	return m.recorder
}

// FetchMessages mocks base method.
func (m *MockInterfaceSlackClient) FetchMessages(arg0 string) ([]*pkg.SlackMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMessages", arg0)
	ret0, _ := ret[0].([]*pkg.SlackMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMessages indicates an expected call of FetchMessages.
func (mr *MockInterfaceSlackClientMockRecorder) FetchMessages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMessages", reflect.TypeOf((*MockInterfaceSlackClient)(nil).FetchMessages), arg0)
}

// FilterMessages mocks base method.
func (m *MockInterfaceSlackClient) FilterMessages(arg0 []*pkg.SlackMessage, arg1 *pkg.FilterSlackMessagesOptions) []*pkg.SlackMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterMessages", arg0, arg1)
	ret0, _ := ret[0].([]*pkg.SlackMessage)
	return ret0
}

// FilterMessages indicates an expected call of FilterMessages.
func (mr *MockInterfaceSlackClientMockRecorder) FilterMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterMessages", reflect.TypeOf((*MockInterfaceSlackClient)(nil).FilterMessages), arg0, arg1)
}

// GetConversationHistory mocks base method.
func (m *MockInterfaceSlackClient) GetConversationHistory(arg0 string) ([]*pkg.SlackMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationHistory", arg0)
	ret0, _ := ret[0].([]*pkg.SlackMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationHistory indicates an expected call of GetConversationHistory.
func (mr *MockInterfaceSlackClientMockRecorder) GetConversationHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationHistory", reflect.TypeOf((*MockInterfaceSlackClient)(nil).GetConversationHistory), arg0)
}
